{"version":3,"sources":["components/LoadingScreen/LoadingScreen.module.css","components/CardImage/CardImage.module.css","components/DeckView/DeckView.module.css","components/SeachListForm/SearchListForm.module.css","reportWebVitals.js","components/Cardlink/Cardlink.js","components/Decklist.js","components/DecklistInput/DecklistInput.js","components/CardImage/CardImage.js","components/DeckView/DeckView.js","components/Options.js","utils/GetRandomLadderDeck.js","components/RandomLadderDeck.js","pages/View.js","pages/Analyse.js","pages/Credits.js","components/Navigation.js","components/SearchList.js","components/SeachListForm/SearchListForm.js","pages/Build.js","utils/GetCards.js","pages/Stream.js","components/LoadingScreen/LoadingScreen.js","App.js","index.js","components/Cardlink/Cardlink.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Cardlink","affinity","rgba","draggableId","this","props","dragSuffix","index","provided","draggableProps","dragHandleProps","ref","innerRef","Card","className","card","styles","id","style","background","get_rgba","img","Body","class","cardBody","cardCost","cost","name","amountActions","cardCountBtns","cardCount","amount","Button","variant","cardLinkBtn","onClick","add","remove","Footer","cardFooter","href","link","target","rel","place","backgroundColor","src","alt","width","React","Component","Decklist","droppableId","droppableProps","marginBottom","cards","map","item","placeholder","DecklistInput","state","card_input","onHandleChange","bind","onHandleSubmit","e","setState","value","preventDefault","addCardAction","rows","onChange","CardImage","cardImg","backgroundImage","Options","optionActions","clear","Dropdown","Toggle","Menu","Item","exportToText","exportToLink","sortByCost","sortByName","sortByAffinity","a","fetch","json","deck_data","random_deck","multi","Math","floor","random","length","deck_text","getRandomLadderDeck","RandomLadderDeck","deck","ViewPage","list","URLSearchParams","window","location","search","get","doc","GoogleSpreadsheet","process","readSpreadsheet","useServiceAccountAuth","client_email","private_key","replace","loadInfo","sheet","sheetsById","getRows","row","deck_id","console","log","deck_list","error","Container","Row","Col","md","reduce","b","AnalysePage","CreditsPage","Navigation","Navbar","bg","expand","Brand","as","Link","to","Collapse","Nav","SearchList","cardsPerPage","changePage","selected","pageVisited","pageNumber","pagesVisited","slice","previousLabel","nextLabel","pageCount","ceil","onPageChange","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","breakLabel","breakClassName","breakLinkClassName","containerClassName","activeClassName","SearchListForm","advanced_active","simple_input","format","atk","hp","tribe","realm","artist","creator","rarity","type","onSimpleInputChange","resetSearchOptions","lockAdvancedSearch","onFormatChange","onTribeChange","onRealmChange","onArtistChange","onCreatorChange","onAffinityChange","onAtkChange","onHpChange","onRarityChange","onTypeChange","onCostChange","searchAction","paginationResetAction","k","dataset","affinities","push","Set","sort","tribes","split","realms","rarities","types","artists","creators","atks","parseInt","hps","costs","CustomMenu","forwardRef","children","labeledBy","useState","setValue","FormControl","autoFocus","Children","toArray","filter","child","toLowerCase","includes","simpleInput","isOpened","onSelect","getTribeList","i","getAffinityList","getAtkList","getHpList","getCostList","getTypeList","getRealmList","getArtistList","getCreatorList","getRarityList","BuildPage","searchlist","saved_database","fillDatabaseAction","database","triggerPaginationReset","getCards","input","PUBLIC_CARDS","lines","charAt","card_amount","card_id","identifier","substring","endsWith","exec","test","localeCompare","undefined","sensitivity","imgurl","card_data","externals_suffix","Object","keys","externals","card_link","card_img","findProperty","Text","Properties","Expression","Value","card_cost","isNaN","Name","Affinity","parent_node","symbol_name","Symbol","StreamPage","LoadingScreen","isLoading","premise","loader","hidden","Spinner","animation","role","spinner","App","onDragEnd","result","destination","source","newDeckList","newSearchList","moved","splice","newList","loadingAction","clearAction","sortByCostAction","sortByNameAction","numeric","sortByAffinityAction","exportToTextAction","decklist","navigator","clipboard","writeText","exportToLinkACtion","appendSpreadsheet","addRow","uuid","decklink","addAmountAction","removeAmountAction","loadingScreen","response","text","data","_data","JSON","parse","table","forEach","c","v","release_date","ability","search_state","path","element","View","Build","Analyse","Stream","Credits","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.589c0983.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"LoadingScreen_loader__1PuNx\",\"spinner\":\"LoadingScreen_spinner__OPH9S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardImg\":\"CardImage_cardImg__1qtCq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deckviewContainer\":\"DeckView_deckviewContainer__1nTUh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"simpleInput\":\"SearchListForm_simpleInput__1DF2C\",\"advancedSearch\":\"SearchListForm_advancedSearch__1o6vs\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport {Button, Card} from \"react-bootstrap\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport styles from './Cardlink.module.css'\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nclass Cardlink extends React.Component{\r\n\r\n    get_rgba(affinity){\r\n        let rgba\r\n        switch (affinity) {\r\n            case \"None\":\r\n                rgba = \"rgba(211,211,211,1)\"\r\n                break\r\n            case \"Mind\":\r\n                rgba = \"rgba(97,180,217, 1)\"\r\n                break\r\n            case \"Strength\":\r\n                rgba = \"rgba(246,156,153, 1)\"\r\n                break\r\n            case \"Spirit\":\r\n                rgba = \"rgba(148,227,142, 1)\"\r\n                break\r\n            default:\r\n                rgba = \"rgba(1,1,1,1)\"\r\n        }\r\n        return rgba\r\n    }\r\n\r\n    // async fetchImg(){\r\n    //     return fetch('https://server.collective.gg/api/card/' + this.props.card.id).then((response) => {\r\n    //         if (response.ok) {\r\n    //             return response.json();\r\n    //         } else {\r\n    //             throw new Error(\"Can't find card via API\");\r\n    //         }\r\n    //     })\r\n    //         .then((responseJson) => {\r\n    //             return findProperty(responseJson.card.Text.Properties, 'PortraitUrl').Expression.Value\r\n    //         })\r\n    //         .catch((error) => {\r\n    //             console.log(error)\r\n    //         })\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <Draggable draggableId={this.props.dragSuffix+\"drag_id_\"+this.props.index} index={this.props.index}>\r\n                {(provided)=>(\r\n                    <div {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\r\n                        <Card\r\n                            className={\"bg-collective affinity-\"+this.props.card.affinity+\" \"+styles.card}\r\n                            data-tip\r\n                            data-for={\"card-tooltip-\"+this.props.card.id}\r\n                            style={{\r\n                                background: `linear-gradient(103deg, `+this.get_rgba(this.props.card.affinity)+` 0%, \r\n                                                        `+this.get_rgba(this.props.card.affinity)+` 42%, \r\n                                                        rgba(255,255,255,0) 50%, \r\n                                                        rgba(255,255,255,0) 80%, \r\n                                                        `+this.get_rgba(this.props.card.affinity)+` 90%, \r\n                                                        `+this.get_rgba(this.props.card.affinity)+` 100%),\r\n                                url(${this.props.card.img}) right 3rem center/50% no-repeat\r\n                                `}}\r\n                        >\r\n                            <Card.Body class={styles.cardBody}>\r\n                                <div className={styles.cardCost}>{this.props.card.cost}</div>\r\n                                <div>{this.props.card.name}</div>\r\n                                {this.props.amountActions &&\r\n                                <div className={styles.cardCountBtns}>\r\n                                    <div className={styles.cardCount}>{this.props.card.amount}</div>\r\n                                    <Button\r\n                                        variant={\"success\"}\r\n                                        className={styles.cardLinkBtn}\r\n                                        onClick={() => this.props.amountActions.add(this.props.index)}\r\n                                    >+</Button>\r\n                                    <Button\r\n                                        variant={\"danger\"}\r\n                                        className={styles.cardLinkBtn}\r\n                                        onClick={() => this.props.amountActions.remove(this.props.index)}\r\n                                    >-</Button>\r\n                                </div>\r\n                                }\r\n                            </Card.Body>\r\n                            <Card.Footer class={styles.cardFooter}>\r\n                                <a href={this.props.card.link}\r\n                                   target={'_blank'}\r\n                                   rel=\"noreferrer\">\r\n                                        {this.props.card.id}\r\n                                </a>\r\n                            </Card.Footer>\r\n                        </Card>\r\n\r\n                        <ReactTooltip\r\n                            id={\"card-tooltip-\"+this.props.card.id}\r\n                            place={\"bottom\"}\r\n                            backgroundColor={\"none\"}\r\n                            className={\"opaque\"}\r\n                        >\r\n                            <img\r\n                                src={this.props.card.link}\r\n                                alt={\"card-tooltip\"}\r\n                                width={\"300px\"}\r\n                            />\r\n                        </ReactTooltip>\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cardlink","import React from \"react\";\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\nimport Cardlink from \"./Cardlink/Cardlink\";\r\n\r\n\r\nclass Decklist extends React.Component{\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Droppable droppableId=\"decklist_drop_id\">\r\n                {(provided)=>(\r\n                    <div ref={provided.innerRef} {...provided.droppableProps}\r\n                         style={{marginBottom: '10rem'}}>\r\n                        {this.props.cards.map((item, index) => (\r\n                            <Cardlink\r\n                                card={item}\r\n                                index={index}\r\n                                key={index}\r\n                                dragSuffix={\"view_\"}\r\n                                amountActions={this.props.amountActions}\r\n                            />\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Decklist","import React from 'react';\r\n// eslint-disable-next-line no-unused-vars\r\nimport styles from './DecklistInput.module.css'\r\n\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nclass DecklistInput extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            card_input: \"\"\r\n        }\r\n\r\n        this.onHandleChange = this.onHandleChange.bind(this);\r\n        this.onHandleSubmit = this.onHandleSubmit.bind(this);\r\n    }\r\n\r\n    onHandleChange(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            card_input: e.target.value\r\n        });\r\n    }\r\n\r\n    onHandleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        this.props.addCardAction(this.state.card_input)\r\n\r\n        this.setState({\r\n            card_input: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <textarea\r\n                rows={3}\r\n                placeholder={\"Card links go here...\"}\r\n                value={this.state.card_input}\r\n                onChange={this.onHandleChange}\r\n            />\r\n\r\n                <Button\r\n                    variant={\"secondary\"}\r\n                    onClick={this.onHandleSubmit}\r\n                >\r\n                    Add Card(s)!\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DecklistInput","import React from 'react'\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport styles from \"./CardImage.module.css\"\r\n\r\nclass CardImage extends React.Component{\r\n    render() {\r\n        return (\r\n            <a\r\n                href={this.props.card.link}\r\n                target={'_blank'}\r\n                rel=\"noreferrer\"\r\n                className={styles.cardImg}\r\n                style={{backgroundImage: `url(${this.props.card.img})`}}\r\n                data-tip\r\n                data-for={\"card-tooltip-\"+this.props.card.id}\r\n            >\r\n                <p>{this.props.card.name}</p>\r\n\r\n                <ReactTooltip\r\n                    id={\"card-tooltip-\"+this.props.card.id}\r\n                    place={\"bottom\"}\r\n                    backgroundColor={\"none\"}\r\n                    className={\"opaque\"}\r\n                >\r\n                    <img\r\n                        src={this.props.card.link}\r\n                        alt={\"card-tooltip\"}\r\n                        width={\"300px\"}\r\n                    />\r\n                </ReactTooltip>\r\n            </a>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardImage","import React from 'react'\r\nimport CardImage from \"../CardImage/CardImage\";\r\nimport styles from \"./DeckView.module.css\"\r\n\r\nclass DeckView extends React.Component{\r\n    render() {\r\n        return (\r\n            <div className={styles.deckviewContainer}>\r\n                {this.props.cards.map((item, index) => (\r\n\r\n                    <CardImage\r\n                        card={item}\r\n                        key={index}\r\n                    />\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeckView","import React from 'react'\r\nimport {Button, Dropdown} from \"react-bootstrap\";\r\n\r\nclass Options extends React.Component{\r\n    render() {\r\n        return (\r\n            <div className={\"page-bottom\"}>\r\n                <Button variant={\"secondary\"} onClick={this.props.optionActions.clear}>Clear</Button>\r\n\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                        Export As\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item href=\"\" onClick={this.props.optionActions.exportToText}>Text</Dropdown.Item>\r\n                        <Dropdown.Item href=\"\" onClick={this.props.optionActions.exportToLink}>Link</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\">\r\n                        Sort By\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item href=\"\" onClick={this.props.optionActions.sortByCost}>Cost</Dropdown.Item>\r\n                        <Dropdown.Item href=\"\" onClick={this.props.optionActions.sortByName}>Name</Dropdown.Item>\r\n                        <Dropdown.Item href=\"\" onClick={this.props.optionActions.sortByAffinity}>Affinity</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Options","async function getRandomLadderDeck(){\r\n    const deck_data = await (await fetch('https://server.collective.gg/api/public/leaderboards')).json()\r\n    const random_deck = deck_data.multi[Math.floor(Math.random() * deck_data.multi.length)];\r\n    let deck_text = \"\"\r\n    for(let card in random_deck.cards){\r\n        deck_text += random_deck.cards[card] + \" \" + card + \"\\n\"\r\n    }\r\n    return deck_text\r\n}\r\n\r\nexport default getRandomLadderDeck","import {Button} from \"react-bootstrap\";\r\nimport getRandomLadderDeck from \"../utils/GetRandomLadderDeck\";\r\n\r\nfunction RandomLadderDeck(props) {\r\n\r\n\r\n    function load(){\r\n        getRandomLadderDeck().then(deck => props.addCardAction(deck))\r\n    }\r\n\r\n    return (\r\n            <div>\r\n                <Button\r\n                    variant={\"secondary\"}\r\n                    onClick={load}\r\n                >\r\n                    See a random deck from Ladder!\r\n                </Button>\r\n                <p className={\"App\"}>OR</p>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default RandomLadderDeck","import React from 'react';\r\n\r\nimport {Col, Row} from \"react-bootstrap\";\r\nimport Decklist from \"../components/Decklist\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport DecklistInput from \"../components/DecklistInput/DecklistInput\";\r\nimport DeckView from \"../components/DeckView/DeckView\";\r\nimport Options from \"../components/Options\";\r\nimport RandomLadderDeck from \"../components/RandomLadderDeck\";\r\nimport {GoogleSpreadsheet} from \"google-spreadsheet\";\r\nimport {v4 as uuid} from \"uuid\";\r\n\r\nclass ViewPage extends React.Component{\r\n\r\n    componentDidMount() {\r\n        // reading url parameter to get a deck code\r\n        const params = new URLSearchParams(window.location.search);\r\n        // console.log(params.get('list'));\r\n\r\n        const list = params.get('list')\r\n        if(list){\r\n            // Config variables\r\n            const SPREADSHEET_ID = process.env.REACT_APP_SPREADSHEET_ID;\r\n            const SHEET_ID = process.env.REACT_APP_SHEET_ID;\r\n            const CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_CLIENT_EMAIL;\r\n            const PRIVATE_KEY = process.env.REACT_APP_GOOGLE_SERVICE_PRIVATE_KEY;\r\n\r\n            const doc = new GoogleSpreadsheet(SPREADSHEET_ID);\r\n\r\n            const readSpreadsheet = async (list) => {\r\n                try {\r\n                    await doc.useServiceAccountAuth({\r\n                        client_email: CLIENT_EMAIL,\r\n                        private_key: PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\r\n                    });\r\n                    // loads document properties and worksheets\r\n                    await doc.loadInfo();\r\n\r\n                    const sheet = doc.sheetsById[SHEET_ID];\r\n                    const rows = await sheet.getRows();\r\n\r\n                    for (let row of rows){\r\n                        if(row.deck_id === list){\r\n                            console.log(row.deck_list)\r\n                            this.props.addCardAction(row.deck_list)\r\n                            return\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    console.error('Error: ', e);\r\n                }\r\n            };\r\n\r\n            readSpreadsheet(list)\r\n\r\n            // this.props.addCardAction(list)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Container className=\"pt-5\">\r\n                <Row>\r\n                    <Col md={5}>\r\n                        {this.props.cards.length <= 0 &&\r\n                        <RandomLadderDeck\r\n                            addCardAction={this.props.addCardAction}\r\n                        />}\r\n                        {this.props.cards.length > 0 &&\r\n                        <div>\r\n                            {this.props.cards.reduce((a,b) => a + b.amount, 0)}\r\n                        </div>}\r\n                        <DecklistInput addCardAction={this.props.addCardAction}/>\r\n                        {this.props.cards.length > 0 && <Options optionActions={this.props.optionActions}/>}\r\n                    </Col>\r\n                    <Col md={5}>\r\n                        <Decklist\r\n                            cards={this.props.cards}\r\n                            amountActions={this.props.amountActions}\r\n                            addCardAction={this.props.addCardAction}\r\n                        />\r\n                        {/*<DeckView cards={this.props.cards}/>*/}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ViewPage","import React from 'react';\r\n\r\nclass AnalysePage extends React.Component{\r\n    render() {\r\n        return (\r\n            <div className={\"App\"}>Under construction...</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AnalysePage","import React from 'react';\r\n\r\nclass CreditsPage extends React.Component{\r\n    render() {\r\n        return (\r\n            <div className={\"App\"}>\r\n                Hi! I'm Sevas. I made this. <br/>\r\n                Thanks to the Collective Community for keeping this game alive, this couldn't be a thing without others to serve. <br/>\r\n                <br/>\r\n                If you really want to show me gratitude ask me out on a date or buy me a coffee.\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreditsPage","import React from 'react';\r\n\r\nimport {Container, Nav, Navbar} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Navigation extends React.Component{\r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Container>\r\n                        <Navbar.Brand as={Link} to={\"/collective-deck/\"}>Collective Deck</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"me-auto\">\r\n                                <Nav.Link as={Link} to={\"/collective-deck/\"}>View</Nav.Link>\r\n                                <Nav.Link as={Link} to={\"/collective-deck/build\"}>Build</Nav.Link>\r\n                                <Nav.Link as={Link} to={\"/collective-deck/analyse\"}>Analyse</Nav.Link>\r\n                                <Nav.Link as={Link} to={\"/collective-deck/credits\"}>Credits</Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navigation","import React from 'react'\r\nimport Cardlink from \"./Cardlink/Cardlink\";\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\nimport ReactPaginate from 'react-paginate'\r\n\r\nclass SearchList extends React.Component {\r\n    cardsPerPage = 10;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            pageNumber: 0,\r\n            pagesVisited: 0\r\n        }\r\n\r\n        this.changePage = this.changePage.bind(this)\r\n    }\r\n\r\n    updatePageVisited(){\r\n        const pageVisited = this.state.pageNumber * this.cardsPerPage\r\n        const pageNumber = this.state.pageNumber\r\n        this.setState({\r\n            pageNumber: pageNumber,\r\n            pagesVisited: pageVisited\r\n        })\r\n    }\r\n\r\n    changePage = ({selected}) => {\r\n        const pageVisited = selected * this.cardsPerPage\r\n        this.setState({\r\n            pageNumber: selected,\r\n            pagesVisited: pageVisited\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Droppable droppableId=\"searchlist_drop_id\">\r\n                    {(provided)=>(\r\n                        <div ref={provided.innerRef} {...provided.droppableProps}\r\n                             style={{marginBottom: '1rem'}}>\r\n                            {this.props.cards.slice(this.state.pagesVisited, this.state.pagesVisited + this.cardsPerPage).map((item, index) => (\r\n                                <Cardlink\r\n                                    card={item}\r\n                                    index={index+this.state.pagesVisited}\r\n                                    key={index+this.state.pagesVisited}\r\n                                    dragSuffix={\"build_\"}\r\n                                />\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <ReactPaginate\r\n                    previousLabel={'<'}\r\n                    nextLabel={'>'}\r\n                    pageCount={Math.ceil(this.props.cards.length/this.cardsPerPage)}\r\n                    onPageChange={this.changePage}\r\n                    pageClassName=\"page-item\"\r\n                    pageLinkClassName=\"page-link\"\r\n                    previousClassName=\"page-item\"\r\n                    previousLinkClassName=\"page-link\"\r\n                    nextClassName=\"page-item\"\r\n                    nextLinkClassName=\"page-link\"\r\n                    breakLabel=\"...\"\r\n                    breakClassName=\"page-item\"\r\n                    breakLinkClassName=\"page-link\"\r\n                    containerClassName=\"pagination\"\r\n                    activeClassName=\"active\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchList","import React, {useState} from 'react'\r\nimport styles from './SearchListForm.module.css'\r\nimport {Button, Dropdown, FormControl} from \"react-bootstrap\"\r\nimport {Collapse} from \"react-collapse\"\r\n\r\nclass SearchListForm extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            advanced_active: false,\r\n            simple_input: \"\",\r\n            format: \"Legacy\",\r\n            affinity: \"\",\r\n            atk: \"\",\r\n            hp: \"\",\r\n            tribe: \"\",\r\n            realm: \"\",\r\n            artist: \"\",\r\n            creator: \"\",\r\n            rarity: \"\",\r\n            type: \"\",\r\n            cost: \"\"\r\n        }\r\n\r\n        this.onSimpleInputChange = this.onSimpleInputChange.bind(this)\r\n        this.resetSearchOptions = this.resetSearchOptions.bind(this)\r\n        this.lockAdvancedSearch = this.lockAdvancedSearch.bind(this)\r\n        this.onFormatChange = this.onFormatChange.bind(this)\r\n        this.onTribeChange = this.onTribeChange.bind(this)\r\n        this.onRealmChange = this.onRealmChange.bind(this)\r\n        this.onArtistChange = this.onArtistChange.bind(this)\r\n        this.onCreatorChange = this.onCreatorChange.bind(this)\r\n        this.onAffinityChange = this.onAffinityChange.bind(this)\r\n        this.onAtkChange = this.onAtkChange.bind(this)\r\n        this.onHpChange = this.onHpChange.bind(this)\r\n        this.onRarityChange = this.onRarityChange.bind(this)\r\n        this.onTypeChange = this.onTypeChange.bind(this)\r\n        this.onCostChange = this.onCostChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetSearchOptions()\r\n    }\r\n\r\n    onSimpleInputChange(e) {\r\n        this.setState({\r\n            simple_input: e.target.value\r\n        })\r\n        this.search()\r\n    }\r\n\r\n    search(){\r\n        this.props.searchAction(this.state)\r\n        this.props.paginationResetAction()\r\n    }\r\n\r\n    lockAdvancedSearch(){\r\n        this.setState({\r\n            ...this.state,\r\n            advanced_active: !this.state.advanced_active\r\n        })\r\n    }\r\n\r\n    resetSearchOptions(){\r\n        this.setState({\r\n            simple_input: \"\",\r\n            format: \"Legacy\",\r\n            affinity: \"\",\r\n            atk: \"\",\r\n            hp: \"\",\r\n            tribe: \"\",\r\n            realm: \"\",\r\n            artist: \"\",\r\n            creator: \"\",\r\n            rarity: \"\",\r\n            type: \"\",\r\n            cost: \"\"\r\n        }, () => this.search())\r\n    }\r\n\r\n    onFormatChange(k, e){\r\n        // console.log(e.target.dataset.format)\r\n        this.setState({\r\n            ...this.state,\r\n            format: e.target.dataset.format\r\n        }, () => this.search())\r\n        // https://stackoverflow.com/questions/38245791/react-how-to-force-state-changes-to-take-place-after-setstate\r\n    }\r\n\r\n    onAffinityChange(k,e){\r\n        this.setState({\r\n            ...this.state,\r\n            affinity: e.target.dataset.affinity\r\n        }, () => this.search())\r\n    }\r\n\r\n    getAffinityList(){\r\n        let affinities = [\"\"]\r\n        this.props.cards.map(card => affinities.push(card.affinity))\r\n\r\n        //remove duplicates and sort alphabetically\r\n        // put 'None' at the top of the list\r\n        // if (affinities.includes(\"None\")){\r\n        //     affinities.splice(affinities.indexOf(\"None\"), 1)\r\n        //     affinities = [...new Set(affinities)].sort()\r\n        //     affinities.unshift(\"None\")\r\n        //     return affinities\r\n        // }\r\n        // else{\r\n\r\n        return [...new Set(affinities)].sort()\r\n    }\r\n\r\n    onTribeChange(k,e){\r\n        // console.log(e.target.dataset.tribe)\r\n        this.setState({\r\n            ...this.state,\r\n            tribe: e.target.dataset.tribe\r\n        }, () => this.search())\r\n    }\r\n\r\n    getTribeList(){\r\n        // get a list of all tribes from current card pool\r\n        let tribes = [\"\"]\r\n        this.props.cards.map(card => tribes.push(...card.tribe.split(' ')))\r\n\r\n        //remove duplicates and sort alphabetically\r\n        return [...new Set(tribes)].sort()\r\n    }\r\n\r\n    onRealmChange(k,e){\r\n        // console.log(e.target.dataset.tribe)\r\n        this.setState({\r\n            ...this.state,\r\n            realm: e.target.dataset.realm\r\n        }, () => this.search())\r\n    }\r\n\r\n    getRealmList(){\r\n        // get a list of all realms from current card pool\r\n        let realms = [\"\"]\r\n        this.props.cards.map(card => realms.push(card.realm))\r\n\r\n        //remove duplicates and sort alphabetically\r\n        return [...new Set(realms)].sort()\r\n    }\r\n\r\n    onRarityChange(k,e){\r\n        this.setState({\r\n            ...this.state,\r\n            rarity: e.target.dataset.rarity\r\n        }, () => this.search())\r\n    }\r\n\r\n    getRarityList(){\r\n        // get a list of all rarities from current card pool\r\n        let rarities = [\"\"]\r\n        this.props.cards.map(card => rarities.push(card.rarity))\r\n\r\n        //remove duplicates and sort alphabetically\r\n        return [...new Set(rarities)].sort()\r\n    }\r\n\r\n    onTypeChange(k,e){\r\n        this.setState({\r\n            ...this.state,\r\n            type: e.target.dataset.type\r\n        }, () => this.search())\r\n    }\r\n\r\n    getTypeList(){\r\n        // get a list of all types from current card pool\r\n        let types = [\"\"]\r\n        this.props.cards.map(card => types.push(card.type))\r\n\r\n        //remove duplicates and sort alphabetically\r\n        return [...new Set(types)].sort()\r\n    }\r\n\r\n    onArtistChange(k,e){\r\n        // console.log(e.target.dataset.tribe)\r\n        this.setState({\r\n            ...this.state,\r\n            artist: e.target.dataset.artist\r\n        }, () => this.search())\r\n    }\r\n\r\n    getArtistList(){\r\n        // get a list of all artists from current card pool\r\n        let artists = [\"\"]\r\n        this.props.cards.map(card => artists.push(...card.artist.split(' ')))\r\n\r\n        //remove duplicates and sort alphabetically\r\n        return [...new Set(artists)].sort()\r\n    }\r\n\r\n    onCreatorChange(k,e){\r\n        this.setState({\r\n            ...this.state,\r\n            creator: e.target.dataset.creator\r\n        }, () => this.search())\r\n    }\r\n\r\n    getCreatorList(){\r\n        // get a list of all creators from current card pool\r\n        let creators = [\"\"]\r\n        this.props.cards.map(card => creators.push(...card.creator.split(' ')))\r\n\r\n        //remove duplicates and sort alphabetically\r\n        return [...new Set(creators)].sort()\r\n    }\r\n\r\n    onAtkChange(k,e){\r\n        this.setState({\r\n            ...this.state,\r\n            atk: e.target.dataset.atk\r\n        }, () => this.search())\r\n    }\r\n\r\n    getAtkList(){\r\n        // get a list of all atk values from current card pool\r\n        // !!! potential bug cause actions\r\n        let atks = [\"\"]\r\n        this.props.cards.map(card => {\r\n            if(card.cost !== \"\")\r\n                atks.push(card.atk)\r\n        })\r\n\r\n        //remove duplicates and sort\r\n        return [...new Set(atks)].sort((a,b) => parseInt(a) - parseInt(b))\r\n    }\r\n\r\n    onHpChange(k,e){\r\n        this.setState({\r\n            ...this.state,\r\n            hp: e.target.dataset.hp\r\n        }, () => this.search())\r\n    }\r\n\r\n    getHpList(){\r\n        // get a list of all atk values from current card pool\r\n        // !!! potential bug cause actions\r\n        let hps = [\"\"]\r\n        this.props.cards.map(card => {\r\n            if(card.cost !== \"\")\r\n                hps.push(card.hp)\r\n        })\r\n\r\n        //remove duplicates and sort\r\n        return [...new Set(hps)].sort((a,b) => parseInt(a) - parseInt(b))\r\n    }\r\n\r\n    onCostChange(k,e){\r\n        this.setState({\r\n            ...this.state,\r\n            cost: e.target.dataset.cost\r\n        }, () => this.search())\r\n    }\r\n\r\n    getCostList(){\r\n        // get a list of all cost values from current card pool\r\n        let costs = [\"\"]\r\n        this.props.cards.map(card => {\r\n            if(card.cost !== \"\")\r\n                costs.push(card.cost)\r\n        })\r\n\r\n        //remove duplicates and sort\r\n        return [...new Set(costs)].sort((a,b) => parseInt(a) - parseInt(b))\r\n    }\r\n\r\n    render() {\r\n        // forwardRef again here!\r\n        // Dropdown needs access to the DOM of the Menu to measure it\r\n        const CustomMenu = React.forwardRef(\r\n            ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n                const [value, setValue] = useState('');\r\n\r\n                return (\r\n                    <div\r\n                        ref={ref}\r\n                        style={style}\r\n                        className={className}\r\n                        aria-labelledby={labeledBy}\r\n                    >\r\n                        <FormControl\r\n                            autoFocus\r\n                            className=\"mx-auto my-2 w-75\"\r\n                            placeholder=\"Type to filter...\"\r\n                            onChange={(e) => setValue(e.target.value)}\r\n                            value={value}\r\n                        />\r\n                        <ul className=\"list-unstyled\">\r\n                            {React.Children.toArray(children).filter(\r\n                                (child) =>\r\n                                    !value || child.props.children.toLowerCase().includes(value.toLowerCase()),\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                );\r\n            },\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <input\r\n                    className={styles.simpleInput}\r\n                    placeholder={\"Search...\"}\r\n                    value={this.state.card_input}\r\n                    onChange={this.onSimpleInputChange}\r\n                />\r\n                <Button onClick={this.lockAdvancedSearch}>\r\n                    Advanced Options\r\n                </Button>\r\n                <Collapse isOpened={this.state.advanced_active}>\r\n                    <Button onClick={this.resetSearchOptions}>\r\n                        Clear Options\r\n                    </Button>\r\n\r\n                    <Dropdown onSelect={this.onFormatChange}>\r\n                        <Dropdown.Toggle>\r\n                            Format: <b>{this.state.format}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item data-format={\"Legacy\"}>Legacy</Dropdown.Item>\r\n                            <Dropdown.Item data-format={\"Standard\"}>Standard</Dropdown.Item>\r\n                            {/*<Dropdown.Item data-format={\"New Standard\"}>New Standard</Dropdown.Item>*/}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onTribeChange}>\r\n                        <Dropdown.Toggle>\r\n                            Tribe: <b>{this.state.tribe || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu as={CustomMenu}>\r\n                            {this.getTribeList().map((tribe, i) =>\r\n                                <Dropdown.Item data-tribe={tribe}>{tribe || \"All\"}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onAffinityChange}>\r\n                        <Dropdown.Toggle>\r\n                            Affinity: <b>{this.state.affinity || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu as={CustomMenu}>\r\n                            {this.getAffinityList().map((affinity, i) =>\r\n                                <Dropdown.Item data-affinity={affinity}>{affinity || \"All\"}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onAtkChange}>\r\n                        <Dropdown.Toggle>\r\n                            ATK: <b>{this.state.atk || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            {this.getAtkList().map((atk, i) =>\r\n                                <Dropdown.Item data-atk={atk}>{atk === \"\" ? \"All\" : atk}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onHpChange}>\r\n                        <Dropdown.Toggle>\r\n                            HP: <b>{this.state.hp || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            {this.getHpList().map((hp, i) =>\r\n                                <Dropdown.Item data-hp={hp}>{hp === \"\" ? \"All\" : hp}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onCostChange}>\r\n                        <Dropdown.Toggle>\r\n                            Cost: <b>{this.state.cost || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            {this.getCostList().map((cost, i) =>\r\n                                <Dropdown.Item data-cost={cost}>{cost === \"\" ? \"All\" : cost}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onTypeChange}>\r\n                        <Dropdown.Toggle>\r\n                            Type: <b>{this.state.type || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu as={CustomMenu}>\r\n                            {this.getTypeList().map((type, i) =>\r\n                                <Dropdown.Item data-type={type}>{type || \"All\"}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onRealmChange}>\r\n                        <Dropdown.Toggle>\r\n                            Realm: <b>{this.state.realm || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu as={CustomMenu}>\r\n                            {this.getRealmList().map((realm, i) =>\r\n                                <Dropdown.Item data-realm={realm}>{realm || \"All\"}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onArtistChange}>\r\n                        <Dropdown.Toggle>\r\n                            Artist: <b>{this.state.artist || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu as={CustomMenu}>\r\n                            {this.getArtistList().map((artist, i) =>\r\n                                <Dropdown.Item data-artist={artist}>{artist || \"All\"}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onCreatorChange}>\r\n                        <Dropdown.Toggle>\r\n                            Creator: <b>{this.state.creator || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu as={CustomMenu}>\r\n                            {this.getCreatorList().map((creator, i) =>\r\n                                <Dropdown.Item data-creator={creator}>{creator || \"All\"}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                    <Dropdown onSelect={this.onRarityChange}>\r\n                        <Dropdown.Toggle>\r\n                            Rarity: <b>{this.state.rarity || \"All\"}</b>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu as={CustomMenu}>\r\n                            {this.getRarityList().map((rarity, i) =>\r\n                                <Dropdown.Item data-rarity={rarity}>{rarity || \"All\"}</Dropdown.Item>\r\n                            )}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n\r\n                </Collapse>\r\n           </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchListForm","import React from 'react';\r\nimport {Button, Col, Row} from \"react-bootstrap\";\r\nimport Decklist from \"../components/Decklist\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport SearchList from \"../components/SearchList\";\r\nimport SearchListForm from \"../components/SeachListForm/SearchListForm\";\r\n\r\nclass BuildPage extends React.Component{\r\n\r\n    triggerPaginationReset(){\r\n        this.searchlist.changePage({\"selected\":0})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container className=\"pt-5\">\r\n                <Row>\r\n                    <Col md={5}>\r\n                        {this.props.saved_database.length <= 0 &&\r\n                            <Button variant={\"primary\"} onClick={this.props.fillDatabaseAction}>Load All Cards</Button>\r\n                        }\r\n                        {this.props.saved_database.length > 0 &&\r\n                            <SearchListForm searchAction={this.props.searchAction}\r\n                                            cards={this.props.database}\r\n                                            paginationResetAction={this.triggerPaginationReset.bind(this)}\r\n                            />\r\n                        }\r\n                        <SearchList cards={this.props.database}\r\n                                    ref={searchlist => this.searchlist = searchlist}\r\n                        />\r\n                    </Col>\r\n                    <Col md={5}>\r\n                        <Decklist cards={this.props.cards}\r\n                                  amountActions={this.props.amountActions}\r\n                                  addCardAction={this.props.addCardAction}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BuildPage","export async function getCards(input) {\r\n    const PUBLIC_CARDS = await (await fetch('https://server.collective.gg/api/public-cards/')).json()\r\n\r\n\r\n    const lines = input.split('\\n')\r\n\r\n    let cards = []\r\n\r\n    for (let i=0; i<lines.length; i++){\r\n        if(lines[i].charAt(0) === '#' || lines[i] === '')\r\n            continue\r\n\r\n        let card_amount = parseInt(lines[i].charAt(0))\r\n\r\n        let card_id = ''\r\n\r\n        const identifier = lines[i].substring(2)\r\n        //identifier can be:\r\n        //      - card link\r\n        //      - card id\r\n        //      - card name\r\n\r\n        // case: card link\r\n        if(identifier.endsWith('.png')){\r\n            card_id = /(?<=\\/p\\/cards\\/)(.*?)(?=...png)/.exec(identifier)[0]\r\n        }\r\n        // case: card id\r\n        // ! this also catches when no number is provided in front of a link !\r\n        else if(/([a-z]|[0-9]){8}-([a-z]|[0-9]){4}-([a-z]|[0-9]){4}-([a-z]|[0-9]){4}-([a-z]|[0-9]){12}/.test(identifier)){\r\n            card_id = identifier\r\n        }\r\n\r\n        // case: card name\r\n        else{\r\n            for(const card of PUBLIC_CARDS.cards){\r\n                if(card.name.localeCompare(identifier, undefined, { sensitivity: 'base' }) === 0){\r\n                    card_id = /(?<=\\/p\\/cards\\/)(.*?)(?=...png)/.exec(card.imgurl)[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (card_id === '') {\r\n            console.log(\"INPUT ERROR\")\r\n            return []\r\n        }\r\n\r\n        const card_data = await (await fetch('https://server.collective.gg/api/card/'+ card_id)).json()\r\n\r\n        let externals_suffix = \"\";\r\n        if(Object.keys(card_data.externals).length > 0)\r\n            externals_suffix = \"-m\"\r\n        else{\r\n            externals_suffix = \"-s\"\r\n        }\r\n        const card_link = 'https://files.collective.gg/p/cards/' + card_id + externals_suffix + '.png'\r\n\r\n        const card_img = findProperty(card_data.card.Text.Properties, 'PortraitUrl').Expression.Value;\r\n\r\n        const card_cost = findProperty(card_data.card.Text.Properties, 'IGOCost').Expression.Value\r\n\r\n        if (isNaN(card_amount))\r\n            card_amount = 1\r\n\r\n        console.log(card_data.card.Text.Name)\r\n\r\n        cards.push({\r\n            id: card_id,\r\n            name: card_data.card.Text.Name,\r\n            link: card_link,\r\n            img: card_img,\r\n            affinity: card_data.card.Text.Affinity,\r\n            cost: card_cost,\r\n            amount: card_amount\r\n        })\r\n    }\r\n\r\n\r\n    return cards\r\n}\r\n\r\nexport function findProperty(parent_node, symbol_name){\r\n    // find correct Property index\r\n    for(let i = 0; i < parent_node.length; i++){\r\n        if(parent_node[i].Symbol.Name === symbol_name){\r\n            return parent_node[i];\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport default getCards","import React from 'react';\r\n\r\nclass StreamPage extends React.Component{\r\n    render() {\r\n        return (\r\n            <div>test stream</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StreamPage","import React from 'react'\r\nimport styles from './LoadingScreen.module.css'\r\nimport {Spinner} from \"react-bootstrap\";\r\n\r\nclass LoadingScreen extends React.Component{\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    loadingScreen(premise){\r\n        this.setState({\r\n            isLoading: true\r\n        })\r\n\r\n        premise.then(() => this.setState({\r\n            isLoading: false\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.loader} hidden={!this.state.isLoading}>\r\n                <Spinner animation=\"border\" role=\"status\" className={styles.spinner}>\r\n                    <span className=\"visually-hidden \">Loading...</span>\r\n                </Spinner>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoadingScreen","import './App.css';\n\nimport React from 'react';\n\nimport {Route, Routes} from \"react-router-dom\";\nimport ViewPage from \"./pages/View\";\nimport AnalysePage from \"./pages/Analyse\";\nimport CreditsPage from \"./pages/Credits\";\nimport Navigation from \"./components/Navigation\";\nimport BuildPage from \"./pages/Build\";\nimport {DragDropContext} from \"react-beautiful-dnd\";\nimport {getCards} from \"./utils/GetCards\";\nimport StreamPage from \"./pages/Stream\";\nimport LoadingScreen from \"./components/LoadingScreen/LoadingScreen\";\nimport {GoogleSpreadsheet} from \"google-spreadsheet\";\nimport { v4 as uuid } from 'uuid';\n\n//https://www.youtube.com/watch?v=Dorf8i6lCuk&ab_channel=Academind\n\nclass App extends React.Component{\n\n    constructor(){\n        super();\n\n        this.state = {\n            children: [],\n            database: [],\n            saved_database:[]\n        }\n    }\n\n    onDragEnd = result => {\n\n        // TODO: when source searchList & destination deckList -> add from database to deckList\n        // TODO: this look dumb, make it smart\n        // decklist_drop_id\n\n        const {destination, source} = result\n\n        if(!destination)\n            return;\n\n        if(source.droppableId === \"searchlist_drop_id\"){\n            if(destination.droppableId === \"decklist_drop_id\"){\n\n                const newDeckList = [...this.state.children]\n                const newSearchList = [...this.state.database]\n\n                //let [moved] = newSearchList.splice(source.index, 1)\n                let moved = newSearchList[source.index]\n                moved.amount = 1\n                newDeckList.splice(destination.index, 0, moved)\n\n                this.setState({\n                    children: newDeckList,\n                    database: newSearchList\n                })\n            }\n        }\n        else if(source.droppableId === \"decklist_drop_id\"){\n            if(\n                destination.droppableId === source.droppableId &&\n                destination.index === source.index\n            ) {\n                return\n            }\n\n            const newList = [...this.state.children]\n            const [moved] = newList.splice(source.index, 1)\n            newList.splice(destination.index,0, moved)\n\n            this.setState({\n                children: newList,\n                database: this.state.database\n            })\n        }\n    }\n\n    addCardAction = (input) => {\n        this.loadingAction(\n            getCards(input)\n                .then(cards => {\n                    this.setState({\n                        children: [\n                            ...this.state.children,\n                            ...cards\n                        ]\n                    });\n                })\n        )\n    }\n\n    clearAction = () => {\n        this.setState({\n            children: []\n        })\n    }\n\n    sortByCostAction = () => {\n        let cards = this.state.children\n        cards.sort((a,b) => {\n            return parseInt(a.cost) - parseInt(b.cost)\n        })\n        this.setState({\n            children: cards\n        })\n    }\n\n    sortByNameAction = () => {\n        let cards = this.state.children\n        cards.sort((a,b) => {\n            return a.name.localeCompare(b.name, undefined, { numeric: true })\n        })\n        this.setState({\n            children: cards\n        })\n    }\n\n    sortByAffinityAction = () => {\n        let cards = this.state.children\n        cards.sort((a,b) => {\n            return a.affinity.localeCompare(b.affinity, undefined, { numeric: true })\n        })\n        this.setState({\n            children: cards\n        })\n    }\n\n    exportToTextAction = () => {\n        const cards = this.state.children\n        let decklist = \"\"\n        cards.map((card) => (\n            decklist += card.amount + \" \" + card.link + \"\\n\"\n        ))\n        navigator.clipboard.writeText(decklist)\n        }\n\n    exportToLinkACtion = async () => {\n\n        // Config variables\n        const SPREADSHEET_ID = process.env.REACT_APP_SPREADSHEET_ID;\n        const SHEET_ID = process.env.REACT_APP_SHEET_ID;\n        const CLIENT_EMAIL = process.env.REACT_APP_GOOGLE_CLIENT_EMAIL;\n        const PRIVATE_KEY = process.env.REACT_APP_GOOGLE_SERVICE_PRIVATE_KEY;\n\n        const doc = new GoogleSpreadsheet(SPREADSHEET_ID);\n\n        const appendSpreadsheet = async (row) => {\n            try {\n                await doc.useServiceAccountAuth({\n                    client_email: CLIENT_EMAIL,\n                    private_key: PRIVATE_KEY.replace(/\\\\n/g, '\\n'),\n                });\n                // loads document properties and worksheets\n                await doc.loadInfo();\n\n                const sheet = doc.sheetsById[SHEET_ID];\n                const result = await sheet.addRow(row);\n            } catch (e) {\n                console.error('Error: ', e);\n            }\n        };\n\n        // // decklist format\n        const cards = this.state.children\n        let decklist = \"\"\n        cards.map((card) => (\n            decklist += card.amount + \" \" + card.link + \"\\n\"\n        ))\n\n        // // generate unique id based on uuidv4\n        const deck_id = uuid().slice(0,8)\n\n        const newRow = { deck_id: deck_id, deck_list: decklist };\n\n        appendSpreadsheet(newRow);\n\n        const decklink = \"https://sebakocz.github.io/collective-deck/?link=\"+deck_id\n\n        navigator.clipboard.writeText(decklink)\n    }\n\n    optionActions = {\n        clear: this.clearAction,\n        sortByCost: this.sortByCostAction,\n        sortByName: this.sortByNameAction,\n        sortByAffinity: this.sortByAffinityAction,\n        exportToText: this.exportToTextAction,\n        exportToLink: this.exportToLinkACtion\n    }\n\n    addAmountAction = (index) => {\n        let cards = this.state.children\n        if(cards[index].amount >= 3)\n            return\n        cards[index].amount++\n        this.setState({\n            children: cards\n        })\n    }\n\n    removeAmountAction = (index) => {\n        let cards = this.state.children\n        if(cards[index].amount <= 1) {\n            cards.splice(index, 1)\n        }\n        else {\n            cards[index].amount--\n        }\n        this.setState({\n            children: cards\n        })\n    }\n\n    amountActions = {\n        add: this.addAmountAction,\n        remove: this.removeAmountAction\n    }\n\n    loadingAction = (premise) => {\n        this.LoadingScreen.loadingScreen(premise)\n    }\n\n    fillDatabaseAction = async () => {\n        let cards = []\n\n        var id = '1GqUqHDlW3gSzasXYt8LhhzigXCduWyz_Dvz2rpXzBfM';\n        var gid = '0';\n        var url = 'https://docs.google.com/spreadsheets/d/'+id+'/gviz/tq?tqx=out:json&tq&gid='+gid;\n        this.loadingAction(fetch(url)\n            .then(response => response.text())\n            .then(data => {\n                //console.log(data.substring(47).slice(0, -2))\n                const _data = JSON.parse(data.substring(47).slice(0, -2))\n                console.log(_data)\n                _data.table.rows.forEach(async row => {\n                    if (Object.keys(row.c).length === 0)\n                        return;\n                    if (row.c[3].v === 'Undraftable')\n                        return;\n                    // if (row.c[16].v !== 0)\n                    //     return;\n\n                    // uid could be fetched directly if I add a field to the google doc\n                    const card_id = /(?<=\\/p\\/cards\\/)(.*?)(?=...png)/.exec(row.c[12].v)[0]\n\n                    // this is very hacky, I hope I can use the old version again soon\n                    cards.push({\n                        id: card_id,\n                        name: row.c[0] ? row.c[0].v : \"\",\n                        link: row.c[12] ? row.c[12].v : \"\",\n                        img: row.c[15] ? row.c[15].v : \"\",\n                        affinity: row.c[2] ? row.c[2].v : \"\",\n                        cost: row.c[4] ? row.c[4].v : \"\",\n                        tribe: row.c[10] ? row.c[10].v : \"\",\n                        realm: row.c[11] ? row.c[11].v : \"\",\n                        release_date: row.c[13] ? row.c[13].v : \"\",\n                        ability: row.c[7] ? row.c[7].v : \"\",\n                        creator: row.c[8] ? row.c[8].v : \"\",\n                        artist: row.c[9] ? row.c[9].v : \"\",\n                        atk: row.c[5] ? row.c[5].v : \"\",\n                        hp: row.c[6] ? row.c[6].v : \"\",\n                        rarity: row.c[3] ? row.c[3].v : \"\",\n                        type: row.c[1] ? row.c[1].v : \"\",\n                        state: row.c[16] ? row.c[16].v : \"\",\n                    })\n                })\n            }).then(() => {\n                cards = cards\n                    .sort((a, b) => a.name.localeCompare(b.name, undefined, {numeric: true}))\n                    .sort((a, b) => parseInt(a.cost) - parseInt(b.cost))\n                this.setState({\n                    ...this.state,\n                    database: [\n                        ...cards\n                    ],\n                    saved_database: [\n                        ...cards\n                    ]\n                })\n            }))\n\n        // this worked pretty well but external maintenance is meh\n        // old version - this.loadingAction(fetch('https://opensheet.vercel.app/17r2KWb9eF7ceUG5VfvGgAkHm0l863OYWHJktvvh2sIQ/cards')\n        // this.loadingAction(fetch('https://opensheet.elk.sh/1GqUqHDlW3gSzasXYt8LhhzigXCduWyz_Dvz2rpXzBfM/Database')\n        //     .then(res => res.json())\n        //     .then(data => {\n        //         data.forEach(async row => {\n        //             if (Object.keys(row).length === 0)\n        //                 return;\n        //             if (row.rarity === 'Undraftable')\n        //                 return;\n        //\n        //             // uid could be fetched directly if I add a field to the google doc\n        //             const card_id = /(?<=\\/p\\/cards\\/)(.*?)(?=...png)/.exec(row.link)[0]\n        //\n        //             cards.push({\n        //                 id: card_id,\n        //                 name: row.name,\n        //                 link: row.link,\n        //                 img: row.image,\n        //                 affinity: row.affinity,\n        //                 cost: row.cost,\n        //                 tribe: row.tribe,\n        //                 realm: row.realm,\n        //                 release_date: row.release_date\n        //             })\n        //         })\n        //     })\n        //     .then(() => {\n        //         cards = cards\n        //                     .sort((a,b) => a.name.localeCompare(b.name, undefined, { numeric: true }))\n        //                     .sort((a,b) => parseInt(a.cost) - parseInt(b.cost))\n        //         this.setState({\n        //             ...this.state,\n        //             database: [\n        //                 ...cards\n        //             ],\n        //             saved_database: [\n        //                 ...cards\n        //             ]\n        //         })\n        //     })\n        // )\n    }\n\n    searchAction = (search_state) => {\n\n        let result = this.state.saved_database\n\n        // based on simple search\n        const {simple_input} = search_state\n        result = result.filter(card =>\n            card.name.toLowerCase().includes(simple_input.toLowerCase()) ||\n            card.tribe.toLowerCase().includes(simple_input.toLowerCase()) ||\n            card.realm.toLowerCase().includes(simple_input.toLowerCase()) ||\n            card.ability.toLowerCase().includes(simple_input.toLowerCase())\n        )\n\n        //based on format\n        const {format} = search_state\n        switch (format) {\n            case \"Legacy\":\n                // filterless\n                // console.log(\"App: Legacy\")\n                break\n            // case \"Standard\":\n            //     // console.log(\"App: Standard\")\n            //     result = result.filter(card =>\n            //         new Date(card.release_date) > new Date(\"2020-05-22T00:00:00.0000\")\n            //     )\n            //     break\n            // case \"New Standard\":\n            case \"Standard\":\n                // console.log(\"App: New Standard\")\n                result = result.filter(card =>\n                    // new Date(card.release_date) > new Date(\"2021-05-28T00:00:00.0000\") <- old wrong entry\n                    //new Date(card.release_date) > new Date(\"2020-11-21T00:00:00.0000\") <- correct time but intro cards messed up the logic\n                    card.state === 0\n                )\n                break\n            default:\n                // filterless\n                console.log(\"Missing Filter\")\n        }\n\n        // based on affinity\n        const {affinity} = search_state\n        result = result.filter(card => card.affinity.includes(affinity))\n\n        // based on tribe\n        const {tribe} = search_state\n        result = result.filter(card => card.tribe.includes(tribe))\n\n        // based on realm\n        const {realm} = search_state\n        result = result.filter(card => card.realm.includes(realm))\n\n        // based on artist\n        const {artist} = search_state\n        result = result.filter(card => card.artist.includes(artist))\n\n        // based on creator\n        const {creator} = search_state\n        result = result.filter(card => card.creator.includes(creator))\n\n        // based on atk\n        const {atk} = search_state\n        result = result.filter(card => atk === \"\" || parseInt(card.atk) === parseInt(atk))\n\n        // based on hp\n        const {hp} = search_state\n        result = result.filter(card => hp === \"\" || parseInt(card.hp) === parseInt(hp))\n\n        // based on cost\n        const {cost} = search_state\n        result = result.filter(card => cost === \"\" || parseInt(card.cost) === parseInt(cost))\n\n        // based on rarity\n        const {rarity} = search_state\n        result = result.filter(card => card.rarity.includes(rarity))\n\n        // based on type\n        const {type} = search_state\n        result = result.filter(card => card.type.includes(type))\n\n        this.setState({\n            ...this.state,\n            database: [\n                ...result\n            ]\n        })\n    }\n\n    render() {\n      return (\n          <div>\n              <Navigation/>\n              <LoadingScreen ref={LoadingScreen => this.LoadingScreen = LoadingScreen}/>\n              <DragDropContext onDragEnd={this.onDragEnd}>\n                  <Routes>\n                      <Route path=\"/collective-deck/\"\n                             element={<ViewPage cards={this.state.children}\n                                                amountActions={this.amountActions}\n                                                optionActions={this.optionActions}\n                                                addCardAction={this.addCardAction}\n                             />}\n                      />\n                      <Route path=\"/collective-deck/build\"\n                             element={<BuildPage cards={this.state.children}\n                                                 database={this.state.database}\n                                                 saved_database={this.state.saved_database}\n                                                 amountActions={this.amountActions}\n                                                 optionActions={this.optionActions}\n                                                 fillDatabaseAction={this.fillDatabaseAction}\n                                                 searchAction={this.searchAction}\n                             />}\n                      />\n                      <Route path=\"/collective-deck/analyse\" element={<AnalysePage/>}/>\n                      <Route path=\"/collective-deck/stream\" element={<StreamPage/>}/>\n                      <Route path=\"/collective-deck/credits\" element={<CreditsPage/>}/>\n                  </Routes>\n              </DragDropContext>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport './index.css';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <BrowserRouter>\n          <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Cardlink_card__kqvrS\",\"cardBody\":\"Cardlink_cardBody__2zP-I\",\"cardFooter\":\"Cardlink_cardFooter__1Drrz\",\"cardLinkBtn\":\"Cardlink_cardLinkBtn__1I-rx\",\"cardCost\":\"Cardlink_cardCost__9fgYy\",\"cardCountBtns\":\"Cardlink_cardCountBtns__1yAAx\",\"cardCount\":\"Cardlink_cardCount__3SyXs\"};"],"sourceRoot":""}